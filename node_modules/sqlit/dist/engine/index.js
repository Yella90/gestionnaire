"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getInformationSchema = exports.createConnection = exports.createConnectionPool = exports.ConnectionPool = exports.Connection = exports.QueryCounter = void 0;
const information_schema_1 = require("./information_schema");
Object.defineProperty(exports, "getInformationSchema", { enumerable: true, get: function () { return information_schema_1.getInformationSchema; } });
class QueryCounter {
    constructor() {
        this.total = 0;
    }
}
exports.QueryCounter = QueryCounter;
class Connection {
    beginTransaction() {
        return this.query('begin');
    }
    commit() {
        return this.query('commit');
    }
    rollback() {
        return this.query('rollback');
    }
    transaction(callback) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.beginTransaction();
            try {
                const promise = callback(this);
                if (promise instanceof Promise) {
                    const result = yield promise;
                    this.commit();
                    return result;
                }
                // else: caller has dealt with the transaction
            }
            catch (error) {
                this.rollback();
                throw error;
            }
        });
    }
}
exports.Connection = Connection;
class ConnectionPool {
}
exports.ConnectionPool = ConnectionPool;
function createConnectionPool(dialect, connection) {
    if (dialect === 'mysql') {
        const result = require('./mysql').default.createConnectionPool(connection);
        result.name = connection.database;
        return result;
    }
    if (dialect === 'sqlite3') {
        return require('./sqlite3').default.createConnectionPool(connection);
    }
    if (dialect === 'postgres') {
        return require('./postgres').default.createConnectionPool(connection);
    }
    throw Error(`Unsupported engine type: ${dialect}`);
}
exports.createConnectionPool = createConnectionPool;
function createConnection(dialect, connection) {
    if (dialect === 'mysql') {
        const result = require('./mysql').default.createConnection(connection);
        result.name = connection.database;
        return result;
    }
    if (dialect === 'sqlite3') {
        return require('./sqlite3').default.createConnection(connection);
    }
    if (dialect === 'postgres') {
        return require('./postgres').default.createConnection(connection);
    }
    throw Error(`Unsupported engine type: ${dialect}`);
}
exports.createConnection = createConnection;
//# sourceMappingURL=index.js.map