"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports._ConnectionPool = void 0;
const _1 = require(".");
const sqlite3 = require("sqlite3");
class _ConnectionPool extends _1.ConnectionPool {
    constructor(options) {
        super();
        this.options = Object.assign({ connectionLimit: 8 }, options);
        this.pool = [];
        this.claimed = [];
        this.queue = [];
    }
    createConnection() {
        const connection = new _Connection(this.options);
        connection._pool = this;
        this.pool.push(connection);
        return connection;
    }
    get connectionCount() {
        return this.pool.length + this.claimed.length;
    }
    getConnection() {
        return new Promise((resolve, reject) => {
            const client = { resolve, reject };
            if (this.pool.length > 0) {
                this.dispatch(client);
            }
            else if (this.connectionCount < this.options.connectionLimit) {
                this.createConnection();
                this.dispatch(client);
            }
            else {
                this.queue.push(client);
            }
        });
    }
    dispatch(client) {
        const connection = this.pool.shift();
        client.resolve(connection);
        this.claimed.push(connection);
    }
    reclaim(connection) {
        const index = this.claimed.indexOf(connection);
        if (index !== -1) {
            this.claimed.splice(index, 1);
        }
        this.pool.push(connection);
        if (this.queue.length > 0) {
            const client = this.queue.shift();
            this.dispatch(client);
        }
    }
    end() {
        return Promise.resolve();
    }
    escape(value) {
        return `'${value.replace(/'/g, "''")}'`;
    }
    escapeId(name) {
        return `"${name}"`;
    }
}
exports._ConnectionPool = _ConnectionPool;
class _Connection extends _1.Connection {
    constructor(options, connected) {
        super();
        this.dialect = 'sqlite3';
        this.queryCounter = new _1.QueryCounter();
        if (connected) {
            this.connection = options;
        }
        else {
            this.connection = new sqlite3.Database(options.database);
        }
    }
    release() {
        if (this._pool) {
            this._pool.reclaim(this);
            return Promise.resolve();
        }
        return new Promise(resolve => this.connection.close(err => {
            if (err)
                throw err;
            resolve();
        }));
    }
    query(sql) {
        this.queryCounter.total++;
        return new Promise((resolve, reject) => {
            if (/^\s*select\s/i.test(sql)) {
                this.connection.all(sql, function (err, rows) {
                    if (err) {
                        reject(err);
                    }
                    else {
                        resolve(rows);
                    }
                });
            }
            else {
                this.connection.run(sql, function (error) {
                    if (error) {
                        return reject(error);
                    }
                    if (/^\s*insert\s/i.test(sql)) {
                        resolve(this.lastID);
                    }
                    else {
                        resolve({
                            changedRows: this.changes,
                            affectedRows: this.changes
                        });
                    }
                });
            }
        });
    }
    end() {
        return new Promise((resolve, reject) => {
            this.connection.close(err => {
                if (err)
                    reject(err);
                else
                    resolve();
            });
        });
    }
    escape(value) {
        return `'${value.replace(/'/g, "''")}'`;
    }
    escapeId(name) {
        return `"${name}"`;
    }
}
exports.default = {
    createConnectionPool: (options) => {
        return new _ConnectionPool(options);
    },
    createConnection: (options) => {
        return new _Connection(options);
    }
};
//# sourceMappingURL=sqlite3.js.map