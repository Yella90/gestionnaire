import { Connection, QueryCounter, ConnectionPool, Dialect } from '.';
import * as sqlite3 from 'sqlite3';
interface PoolOptions {
    connectionLimit: number;
    database: string;
}
declare type Client = {
    resolve: (connection: _Connection) => void;
    reject: (reason: any) => void;
};
export declare class _ConnectionPool extends ConnectionPool {
    options: PoolOptions;
    pool: Array<_Connection>;
    claimed: Array<_Connection>;
    queue: Array<Client>;
    constructor(options: PoolOptions);
    createConnection(): _Connection;
    get connectionCount(): number;
    getConnection(): Promise<Connection>;
    dispatch(client: Client): void;
    reclaim(connection: _Connection): void;
    end(): Promise<void>;
    escape(value: string): string;
    escapeId(name: string): string;
}
declare class _Connection extends Connection {
    _pool: _ConnectionPool;
    dialect: Dialect;
    connection: sqlite3.Database;
    queryCounter: QueryCounter;
    constructor(options: any, connected?: boolean);
    release(): Promise<void>;
    query(sql: string): Promise<any[] | any>;
    end(): Promise<void>;
    escape(value: string): string;
    escapeId(name: string): string;
}
declare const _default: {
    createConnectionPool: (options: any) => ConnectionPool;
    createConnection: (options: any) => Connection;
};
export default _default;
