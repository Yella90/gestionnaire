import { Connection, ConnectionPool, Dialect } from '.';
import { Pool, PoolConfig } from 'pg';
import { Database as SchemaInfo, Column as ColumnInfo } from 'sqlex';
export declare class _ConnectionPool extends ConnectionPool {
    pool: Pool;
    constructor(options: PoolConfig);
    getConnection(): Promise<Connection>;
    end(): Promise<void>;
    escape(value: string): string;
    escapeId(name: string): string;
}
declare type ColumnUsage = {
    column: string;
    position: number | null;
};
declare type ColumnUsageMap = {
    [key: string]: {
        [key: string]: ColumnUsage[];
    };
};
declare type ForeignKeyMap = {
    [key: string]: {
        [key: string]: {
            table: string;
            constraint: string;
        };
    };
};
declare class SchemaBuilder {
    connection: Connection;
    catalogName: string;
    escapedCatalogName: string;
    constructor(connection: Connection, catalogName: string);
    get dialet(): Dialect;
    getResult(): Promise<SchemaInfo>;
    getColumns(): Promise<{
        [key: string]: ColumnInfo[];
    }>;
    getTableConstraints(): Promise<{
        [key: string]: {
            [key: string]: string;
        };
    }>;
    getKeyColumnUsage(): Promise<ColumnUsageMap>;
    getForeignKeyMap(): Promise<ForeignKeyMap>;
    getEnumMap(): Promise<{
        [key: string]: string[];
    }>;
}
declare const _default: {
    createConnectionPool: (options: any) => ConnectionPool;
    createConnection: (options: any) => Connection;
    SchemaBuilder: typeof SchemaBuilder;
};
export default _default;
