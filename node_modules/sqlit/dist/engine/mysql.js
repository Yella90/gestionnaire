"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const _1 = require(".");
const mysql = require("mysql");
class _ConnectionPool extends _1.ConnectionPool {
    constructor(options) {
        super();
        this.pool = mysql.createPool(options);
    }
    getConnection() {
        return new Promise((resolve, reject) => {
            return this.pool.getConnection((error, connection) => {
                if (error)
                    reject(Error(error.message));
                resolve(new _Connection(connection, true));
            });
        });
    }
    end() {
        return new Promise((resolve, reject) => {
            return this.pool.end(error => {
                if (error)
                    reject(error);
                else
                    resolve();
            });
        });
    }
    escape(value) {
        return mysql.escape(value);
    }
    escapeId(name) {
        return mysql.escapeId(name);
    }
}
class _Connection extends _1.Connection {
    constructor(options, connected) {
        super();
        this.dialect = 'mysql';
        this.queryCounter = new _1.QueryCounter();
        if (connected) {
            this.connection = options;
        }
        else {
            this.connection = mysql.createConnection(options);
        }
    }
    release() {
        const connection = this.connection;
        if (typeof connection.release === 'function') {
            connection.release();
        }
    }
    query(sql) {
        this.queryCounter.total++;
        return new Promise((resolve, reject) => this.connection.query(sql, (error, results, fields) => {
            if (error) {
                return reject(error);
            }
            if (results.insertId) {
                resolve(results.insertId);
            }
            else {
                resolve(results);
            }
        }));
    }
    end() {
        return new Promise((resolve, reject) => {
            this.connection.end(err => {
                if (err)
                    reject(err);
                else
                    resolve();
            });
        });
    }
    escape(value) {
        return mysql.escape(value);
    }
    escapeId(name) {
        return mysql.escapeId(name);
    }
}
exports.default = {
    createConnectionPool: (options) => {
        return new _ConnectionPool(options);
    },
    createConnection: (options) => {
        return new _Connection(options);
    }
};
//# sourceMappingURL=mysql.js.map