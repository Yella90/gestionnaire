import { Database, Table } from './database';
import { Record } from './record';
import { Connection } from './engine';
import { Document } from 'sqlex';
export declare enum FlushMethod {
    INSERT = 0,
    UPDATE = 1,
    DELETE = 2
}
export declare class FlushState {
    method: FlushMethod;
    dirty: Set<string>;
    deleted: boolean;
    merged?: Record;
    selected?: boolean;
    clone(): FlushState;
    json(): {
        method: string;
        dirty: string[];
        deleted: boolean;
        merged: any;
        selected: boolean;
    };
}
export declare function flushRecord(connection: Connection, record: Record): Promise<any>;
export declare function flushDatabaseB(connection: Connection, db: Database): Promise<void>;
export interface FlushOptions {
    afterBegin?: (c: Connection) => Promise<any>;
    beforeCommit?: (c: Connection) => Promise<any>;
    replaceRecordsIn?: string[];
}
export declare function flushDatabase(connection: Connection, db: Database, options?: FlushOptions): Promise<void>;
export declare function dumpDirtyRecords(db: Database, all?: boolean): void;
/**
 * Inserts a list of records sharing the same set of dirty fields
 */
export declare function _insertRecords(connection: Connection, table: Table, names: string[], records: Record[]): Promise<Record[]>;
export declare function replaceRecord(connection: Connection, table: Table, doc: Document): Promise<Record>;
