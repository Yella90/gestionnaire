"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.config = {
    style: 'javascript',
    plural: {
        child: 'children'
    }
};
function pluralise(name) {
    const forms = exports.config.plural;
    if (name in forms) {
        return forms[name];
    }
    if (exports.config.style === 'java') {
        return name + 'List';
    }
    for (const key in forms) {
        if (name.endsWith(key)) {
            return name.substr(0, name.length - key.length) + forms[key];
        }
        if (name.endsWith(ucfirst(key))) {
            return name.substr(0, name.length - key.length) + ucfirst(forms[key]);
        }
    }
    let result;
    if ((result = name.replace(/([^aeiou])y$/i, '$1ies')) != name) {
        return result;
    }
    if ((result = name.replace(/s$/, 'ses')) != name) {
        return result;
    }
    return name + 's';
}
exports.pluralise = pluralise;
function lcfirst(s) {
    return s.charAt(0).toLowerCase() + s.slice(1);
}
exports.lcfirst = lcfirst;
function ucfirst(s) {
    return s.charAt(0).toUpperCase() + s.slice(1);
}
exports.ucfirst = ucfirst;
function toCamelCase(s) {
    return s.replace(/_\w/g, m => m[1].toUpperCase());
}
exports.toCamelCase = toCamelCase;
function toPascalCase(s) {
    return toCamelCase(ucfirst(s));
}
exports.toPascalCase = toPascalCase;
function setPluralForms(data) {
    for (const key in data) {
        exports.config.plural[key] = data[key];
    }
}
exports.setPluralForms = setPluralForms;
function setPluralForm(singular, plural) {
    exports.config.plural[singular] = plural;
}
exports.setPluralForm = setPluralForm;
